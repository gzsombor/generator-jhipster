package <%= packageName %>.config.db;
<%_
  let idType = asEntity(entityClass) + 'Id';
_%>

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Types;
import java.util.UUID;

import org.hibernate.engine.spi.SharedSessionContractImplementor;

import <%= packageName %>.ids.<%= idType %>;
import com.vladmihalcea.hibernate.type.ImmutableType;

public class <%= idType %>Type extends ImmutableType<<%= idType %>> {

    public <%= idType %>Type() {
        super(<%= idType %>.class);
    }

    @Override
    public int[] sqlTypes() {
        return new int[] { Types.BINARY };
    }

    @Override
    protected <%= idType %> get(ResultSet rs, String[] names, SharedSessionContractImplementor session, Object owner)
            throws SQLException {
        Object obj = rs.getObject(names[0]);
        if (obj instanceof UUID uuid) {
            return new <%= idType %>(uuid);
        }
        return null;
    }

    @Override
    protected void set(PreparedStatement st, <%= idType %> value, int index, SharedSessionContractImplementor session)
            throws SQLException {
        if (value == null) {
            st.setNull(index, Types.OTHER);
        } else {
            st.setObject(index, value.id());
        }
    }

}
